use num_bigint::BigUint;
use num_traits::{One, Zero};
use std::collections::VecDeque;

pub fn get_hexonacci_num(n: usize) -> BigUint {
    let mut deq: VecDeque<BigUint> = VecDeque::from([One::one()]);

    for _ in 1..n {
        let new_sum = deq.iter().sum();
        deq.push_back(new_sum);

        while deq.len() > 6 {
            deq.pop_front();
        }
    }

    match deq.pop_back() {
        Some(num) => num,
        None => {
            println!("Error calculating the result");

            BigUint::zero()
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::hex::get_hexonacci_num;
    use num_bigint::BigUint;

    #[test]
    fn it_gets_the_0th_hex_num() {
        assert_eq!(get_hexonacci_num(0), 1_usize.into());
    }

    #[test]
    fn it_gets_the_1st_hex_num() {
        assert_eq!(get_hexonacci_num(1), 1_usize.into());
    }

    #[test]
    fn it_gets_the_2nd_hex_num() {
        assert_eq!(get_hexonacci_num(2), 1_usize.into());
    }

    #[test]
    fn it_gets_the_3rd_hex_num() {
        assert_eq!(get_hexonacci_num(3), 2_usize.into());
    }

    #[test]
    fn it_gets_the_4th_hex_num() {
        assert_eq!(get_hexonacci_num(4), 4_usize.into());
    }

    #[test]
    fn it_gets_the_5th_hex_num() {
        assert_eq!(get_hexonacci_num(5), 8_usize.into());
    }

    #[test]
    fn it_gets_the_6th_hex_num() {
        assert_eq!(get_hexonacci_num(6), 16_usize.into());
    }

    #[test]
    fn it_gets_the_7th_hex_num() {
        assert_eq!(get_hexonacci_num(7), 32_usize.into());
    }

    #[test]
    fn it_gets_the_8th_hex_num() {
        assert_eq!(get_hexonacci_num(8), 63_usize.into());
    }

    #[test]
    fn it_gets_the_10th_hex_num() {
        assert_eq!(get_hexonacci_num(10), 248_usize.into());
    }

    #[test]
    fn it_gets_the_100th_hex_num() {
        assert_eq!(
            get_hexonacci_num(100),
            "146239659652348207816448509469"
                .parse::<BigUint>()
                .expect("Failed to parse BigUint")
        );
    }

    #[test]
    fn it_gets_the_1000th_hex_num() {
        assert_eq!(
            get_hexonacci_num(1000),
            concat!(
                "741949140212937805675349021481846843342765024713398877",
                "900083143426332338990070140526872810244407885237640507",
                "453380329889043964969594917411967279632393817917228051",
                "659334908249981167389351436461773708584276332767271328",
                "121384160203024675745908988714900575796685506885794386",
                "884720740186699626449203264"
            )
            .parse::<BigUint>()
            .expect("Failed to parse BigUint")
        );
    }

    #[test]
    fn it_gets_the_10000th_hex_num() {
        assert_eq!(
            get_hexonacci_num(10000),
            concat!(
                "83842422558848673046354082351358695264856645607872593134806",
                "32767704080197120565768716004689969365867943749436984460755",
                "07150254059446064064773888668781563379286313479457772112844",
                "23010688680717986467855166618856609636798355971882601029983",
                "80978944345236737764597146495667530277340857708476605285568",
                "26273571075103422682154638972350418971935274487999675112826",
                "33117723417070339785934289914105895843462899016733535594930",
                "30154008365995521139135889175357495721489528104981369284853",
                "69681090058940815222442414618432252654359297956228199039959",
                "79688565528168484486821988527028299161228740987726037438136",
                "72038522665534263408245836419449870758992140861082362850000",
                "84011940898196946894525932230442476694545220688413644581933",
                "47619074058470189349489823951765180682214046157935582963377",
                "74512905768774344751187131897997976673039868949839196167649",
                "44370348548134189269593773710573853000638946588880942915273",
                "90489321208540810682642951805024929268290010618747556810893",
                "87175348638024409019332540626934608003106904069116469983519",
                "16543109096008108799339163628442806540100488762035519981981",
                "90195082934201824336082776500442602523587398560207260836760",
                "23489683379896070479571926397620122042647328918075880562968",
                "36068590163844434613276723737690819527607581429786601110089",
                "63843030550345511641299338435504427692156396820675050549268",
                "08469144288641854248511168194117824843548681056792332878947",
                "40357877626195032199711326590812260677530220154221031268941",
                "80914567029327828335806122526543707963636323478095201990007",
                "24772317374422686424962149716393732672118489464376249275155",
                "83921912527593202218589787127792887138208280600193510963586",
                "81487732887690455480998024009476663358594633860339492436016",
                "95269471580263706558418583203286201887185591661109762849447",
                "79697948251244091814852126879707160863145246024592076348434",
                "79831213916838898669636684525201172438664520973129040519051",
                "27291856550029260296302317325072387721075174081456564484805",
                "43722269319009187605727697885898742504402298893498070036185",
                "16203064041733894267741613380730999591952289581632053316986",
                "43551330630992174796965290741458437998091686126248064060151",
                "62713431876106275880634176566530425579798757791222584770407",
                "50177613501947154239649827918743433209773732394833017349013",
                "97458206074623843143004972209889590805231915102458935902103",
                "81664020907807888507960792368249877931905814127607322430599",
                "05325366922601511966447902894681822995911443609733866590206",
                "36773074268571919139807582106609264485038093898876576454034",
                "56899136703085829549054191109295597074186395372315135188571",
                "02536370450718097486937911853370395378680387566857079947307",
                "61208347709510271726047353770997878878107564693332314836950",
                "08839410777476360735866209053286889664430856935767380363497",
                "48878521401419317009360894346391655015118901875119920896563",
                "70177184520291442428864147202658734470489754192407151066038",
                "65679705751773818188419476815817951667476376744735479974341",
                "01173709935817099418890767010582781343629711856553384137494",
                "67022115720892236617102983434691573559001877511081054860122",
                "812076116597515477057724"
            )
            .parse::<BigUint>()
            .expect("Failed to parse BigUint")
        );
    }
}
